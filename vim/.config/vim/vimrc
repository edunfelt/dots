"         __                                                             
" .--.--.|__|.--------.----.----.                                        
" |  |  ||  ||        |   _|  __|                                        
"  \___/ |__||__|__|__|__| |____|                                        
"                                                                        
" Emilia's vimrc <3                                                      
" Author: Emilia Dunfelt, edun@dunfelt.se                                
"                                                                        
" GENERAL --------------------------------------------------------------- {{{

" misc stuff 
set nocompatible                        " no vi compatibility
filetype plugin indent on               " filetype detection
set encoding=UTF-8                      " encoding, please
set spelllang=en_us                     " I write mostly in English anyway
set history=500                         " more command history

" tabs and spacing
set autoindent                          " autoindent new lines
set backspace=indent,eol,start          " backspace the usual way
set expandtab                           " tabs are spaces
set shiftwidth=4                        " shift are spaces
set tabstop=4                           " number of visual spaces per TAB
set softtabstop=4                       " number of spaces per tab when editing
set wrap linebreak nolist               " wrap things nicely
autocmd bufreadpre *.md setlocal textwidth=0    " wrap markdown

" appearance
set background=light
set termguicolors
syntax enable                           " syntax highlighting
set number                              " show line numbers
set cursorline                          " highlight current line
set nocursorcolumn                      " don't highlight current column
set showmatch                           " highlight matching parentheses

set showcmd                             " show command in bottom bar
set showmode                            " show current mode in bottom bar
set wildmenu                            " visual autocomplete for command menu
set wildignore=*.aux,*.*fls,*.gz,*.bbl,*.bcf,*.blg,*.fdb_latexmk,*.pdf

" searching
set incsearch                           " search as characters are entered
set ignorecase                          " not case sensitive...
set smartcase                           " ...unless I want it to be
set hlsearch                            " highlight matches

" }}}

" MAPPINGS --------------------------------------------------------------- {{{

" remap escape
inoremap jk <esc>

" space is leader
let mapleader=" "

" turn off search highlight with escape
nnoremap <leader><Esc> :nohlsearch<CR>

" replace misspelled word on C-l
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

" system clipboard access
set clipboard=unnamed
nnoremap <C-C> "+y

" toggle undotree
nnoremap <F8> :UndotreeToggle<CR>

" toggle tagbar
nnoremap <F9> :TagbarToggle<CR>

" navigate splits better
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" resize splits better
noremap <C-up> <C-W>+
noremap <C-down> <C-W>-
noremap <C-left> <C-W>>
noremap <C-right> <C-W><

" tab switching
nnoremap <leader>- :tabprevious<CR>
nnoremap <leader>+ :tabnext<CR>

" better yanking
nnoremap Y y$

" line wrapping
command! -nargs=* Wrap set wrap linebreak nolist

" insert hours tracked
nnoremap <C-x>t i<C-r>=system("tw-hours \| tr -d '\n'")<CR><Esc>

" toggle nerdtree
map <C-n> :NERDTreeToggle<CR>

" toggle terminal
nnoremap <C-t> :botright terminal ++rows=20<CR>

" toggle markdown preview
nmap <C-p> <Plug>MarkdownPreviewToggle

" open calendar
map <C-x><C-c>b :Calendar -view=year -split=horizontal -position=below -height=12<CR>
map <C-x><C-c>c :Calendar -position=tab<CR>

" find incomplete tasks
nmap <Leader>wa :call VimwikiFindAllIncompleteTasks()<CR>
nmap <Leader>wx :call VimwikiFindIncompleteTasks()<CR>

" fzf files, buffers, history, bibtex
imap <c-x><c-,> <Esc> :Buffers<CR>
imap <c-x><c-f> <Esc> :Files<CR>
imap <c-x><c-r> <Esc> :History<CR>
nmap <leader>, :Buffers<CR>
nmap <leader>f :Files<CR>
nmap <leader>r :History<CR>
nnoremap <leader>g :Rg<CR>
nnoremap <leader>G :GGrep<CR>

" uuid insert
inoremap <C-U> <C-R>=trim(system('uuidgen'))<CR>
nnoremap <C-U> i<C-R>=trim(system('uuidgen'))<CR><ESC>

" printing
nnoremap <silent> <leader>p :%w !lp<CR>

" run python
imap <F5> <Esc>:w<CR>:!clear;python3 %<CR>
nmap <F5> <Esc>:w<CR>:!clear;python3 %<CR>

" ycm
nmap <leader>yfw <Plug>(YCMFindSymbolInWorkspace)
nmap <leader>yfd <Plug>(YCMFindSymbolInDocument)
nnoremap <leader>ygd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>yrn :YcmCompleter RefactorRename<CR>
nmap <leader>D <plug>(YCMHover)

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" debugging
packadd termdebug
let g:termdebug_wide=1
noremap <silent> <leader>dr :Termdebug<cr>
noremap <silent> <leader>rr :Run<cr>
noremap <silent> <leader>b :Break<cr>
noremap <silent> <leader>c :Clear<cr>
noremap <silent> <leader>s :Step<cr>
noremap <silent> <leader>o :Over<cr>
noremap <silent> <leader>e :Evaluate<cr>
noremap <silent> <leader>x :Continue<cr>

" bibtex cite
nnoremap <silent> <leader>c :call fzf#run({
                        \ 'source': 'bibtex-ls',
                        \ 'sink*': function('<sid>bibtex_cite_sink'),
                        \ 'up': '40%',
                        \ 'options': '--ansi --layout=reverse-list --multi --prompt "Cite> "'})<CR>

" bibtex print markdown
nnoremap <silent> <leader>m :call fzf#run({
                        \ 'source': 'bibtex-ls',
                        \ 'sink*': function('<sid>bibtex_markdown_sink'),
                        \ 'up': '40%',
                        \ 'options': '--ansi --layout=reverse-list --multi --prompt "Markdown> "'})<CR>

" find and cite .bib files in current, child, or parent dir
inoremap <silent> @@ <c-g>u<c-o>:call fzf#run({
                        \ 'source': Bibtex_ls(),
                        \ 'sink*': function('<sid>bibtex_cite_sink_insert'),
                        \ 'up': '40%',
                        \ 'options': '--ansi --layout=reverse-list --multi --prompt "Cite> "'})<CR>

" boxes
autocmd BufEnter * nmap ,mc !!boxes -d pound-cmt<CR>
autocmd BufEnter * nmap ,mb !!boxes -d shell<CR>
autocmd BufEnter * vmap ,mc !boxes -d pound-cmt<CR>
autocmd BufEnter * vmap ,mb !!boxes -d shell<CR>
autocmd BufEnter * nmap ,xc !!boxes -d pound-cmt -r<CR>
autocmd BufEnter * vmap ,xc !boxes -d pound-cmt -r<CR>
autocmd BufEnter *.html nmap ,mc !!boxes -d html-cmt<CR>
autocmd BufEnter *.html vmap ,mc !boxes -d html-cmt<CR>
autocmd BufEnter *.html nmap ,xc !!boxes -d html-cmt -r<CR>
autocmd BufEnter *.html vmap ,xc !boxes -d html-cmt -r<CR>
autocmd BufEnter *.[chly],*.[pc]c nmap ,mc !!boxes -d c-cmt<CR>
autocmd BufEnter *.[chly],*.[pc]c vmap ,mc !boxes -d c-cmt<CR>
autocmd BufEnter *.[chly],*.[pc]c nmap ,xc !!boxes -d c-cmt -r<CR>
autocmd BufEnter *.[chly],*.[pc]c vmap ,xc !boxes -d c-cmt -r<CR>
autocmd BufEnter *.C,*.cpp,*.java nmap ,mc !!boxes -d java-cmt<CR>
autocmd BufEnter *.C,*.cpp,*.java vmap ,mc !boxes -d java-cmt<CR>
autocmd BufEnter *.C,*.cpp,*.java nmap ,xc !!boxes -d java-cmt -r<CR>
autocmd BufEnter *.C,*.cpp,*.java vmap ,xc !boxes -d java-cmt -r<CR>
autocmd BufEnter .vimrc*,.exrc nmap ,mc !!boxes -d vim-cmt<CR>
autocmd BufEnter .vimrc*,.exrc vmap ,mc !boxes -d vim-cmt<CR>
autocmd BufEnter .vimrc*,.exrc nmap ,xc !!boxes -d vim-cmt -r<CR>
autocmd BufEnter .vimrc*,.exrc vmap ,xc !boxes -d vim-cmt -r<CR>
autocmd BufEnter *.tex nmap ,mc !!boxes -d tex-cmt<CR>
autocmd BufEnter *.tex vmap ,mc !boxes -d tex-cmt<CR>
autocmd BufEnter *.tex nmap ,mb !!boxes -d tex-box<CR>
autocmd BufEnter *.tex nmap ,xc !!boxes -d tex-cmt -r<CR>
autocmd BufEnter *.tex vmap ,xc !boxes -d tex-cmt -r<CR>
autocmd BufEnter *.tex nmap ,xb !!boxes -d tex-box -r<CR>

" }}}

" SCRIPTS -------------------------------------------------------------- {{{

" remember folds
augroup remember_folds
  autocmd!
  autocmd BufWinLeave ?* mkview 1
  autocmd BufWinEnter ?* silent! loadview 1
augroup END

" enable undofile
set undodir=~/.vim/backup
set undofile
set undoreload=10000

" less indentation sometimes
au BufNewFile,BufRead *.js, *.html, *.css, *.R, *.Rmd
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2

" gui settings
if has('gui_running')
  set guifont=Input\ Mono\ Regular\ 11
  set guioptions-=T                       " no toolbar
  set guioptions-=m                       " no menubar
  nnoremap <F12> :if &guioptions=~#'mT'<Bar>
    \set guioptions-=mT<Bar>
    \else<Bar>
    \set guioptions=+=mT<Bar>
    \endif<Cr>
  color vacme
endif

" change theme by time of day
"let hr = (strftime('%H'))
"if hr >= 17
  "set background=dark
"elseif hr >= 7
  "set background=dark
"endif

" cursor only in active
augroup cursor_off
    autocmd!
    autocmd WinLeave * set nocursorline 
    autocmd WinEnter * set cursorline 
augroup END

" fzf-bibtex and fzf.vim
" ripgrep
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

" ripgrep, advanced
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" git grep
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

" bibtex cite article
function! s:bibtex_cite_sink(lines)
    let r=system("bibtex-cite ", a:lines)
    execute ':normal! a' . r
endfunction

" bibtex print markdown
function! s:bibtex_markdown_sink(lines)
    let r=system("bibtex-markdown ", a:lines)
    execute ':normal! a' . r
endfunction

" find .bib files in current, parent, or child directory
function! Bibtex_ls()
  let bibfiles = (
      \ globpath('.', '*.bib', v:true, v:true) +
      \ globpath('..', '*.bib', v:true, v:true) +
      \ globpath('*/', '*.bib', v:true, v:true)
      \ )
  let bibfiles = join(bibfiles, ' ')
  let source_cmd = 'bibtex-ls '.bibfiles
  return source_cmd
endfunction

function! s:bibtex_cite_sink_insert(lines)
    let r=system("bibtex-cite ", a:lines)
    execute ':normal! a' . r
    call feedkeys('a', 'n')
endfunction

" calendar weekend colors
function! s:calendar_syntax()
  highlight CalendarSunday ctermbg=40 ctermfg=0 guibg=#D47D84 guifg=#F2F1F4
  highlight CalendarSundayTitle ctermbg=40 ctermfg=0 guibg=#D47D84 guifg=#F2F1F4
  highlight CalendarTodaySunday ctermbg=40 ctermfg=0 guibg=#D47D84 guifg=#F2F1F4
  highlight CalendarSaturday ctermbg=40 ctermfg=0 guibg=#d8d5dd guifg=#8b8198
  highlight CalendarSaturdayTitle ctermbg=40 ctermfg=0 guibg=#d8d5dd guifg=#8b8198
  highlight CalendarTodaySaturday ctermbg=40 ctermfg=0 guibg=#d8d5dd guifg=#8b8198
  highlight CalendarToday ctermbg=40 ctermfg=0 guibg=#A3B367 guifg=#F2F2F4
endfunction
augroup CalendarSetSyntax
  autocmd!
  autocmd FileType calendar call s:calendar_syntax()
augroup END

" find incomplete vimwiki tasks
function! VimwikiFindIncompleteTasks()
  lvimgrep /- \[ \]/ %:p
  lopen
endfunction

function! VimwikiFindAllIncompleteTasks()
  VimwikiSearch /- \[ \]/
  lopen
endfunction


" }}}

" STATUS LINE ----------------------------------------------------------- {{{

function! StatuslineMode() abort
  return { 'n': 'NORMAL', 'v': 'VISUAL',   'i': 'INSERT',  'R': 'REPLACE',
         \ 's': 'SELECT', 't': 'TERMINAL', 'c': 'COMMAND', '!': 'SHELL',
    \ }[mode()]
endfunction

set laststatus=2
set statusline=%#cursorlinenr#%{StatuslineMode()}%*
set statusline+=\ [\%n\]\ %f\%m\ %Y\ %r
set statusline+=%=
set statusline+=(%l,%c%V)\ %P

" }}}

" PLUGINS ---------------------------------------------------------------- {{{

" install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" themes and things
Plug 'base16-project/base16-vim'
Plug 'powerman/vim-plugin-AnsiEsc'

" startify
Plug 'mhinz/vim-startify'
let g:startify_session_dir = '~/.vim/session'
let g:startify_session_autoload = 1
let g:startify_custom_header = [
     \"      --+-- WELCOME --+--        ",
     \"   ~+                            ",
     \"            *       +            ",
     \"      '                  |       ",
     \'  ()    .-.,="``"=.    - o -     ',
     \"        '=/_       \     |       ",
     \"     *   |  '=._    |            ",
     \"          \     `=./`,        '  ",
     \"       .   '=.__.=' `='      *   ",
     \"                        +        ",
     \"   O      *        '       .     ",
     \" jgs                             ",
     \ ]

" git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" distraction-free writing
Plug 'junegunn/goyo.vim'

" brackets and co.
Plug 'tpope/vim-surround'
Plug 'gosukiwi/vim-smartpairs'

" ycm
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py' }

" C support
Plug 'WolfgangMehner/c-support'

" python things
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'tmhedberg/SimpylFold'
Plug 'preservim/tagbar'

" LaTeX
Plug 'lervag/vimtex'
Plug 'honza/vim-snippets'
set conceallevel=1 
let g:tex_flavor = "latex"
let g:vimtex_view_method = "zathura"
let g:vimtex_quickfix_mode = 0
let g:tex_conceal="abdmg"

" Pandoc and markdown
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax', { 'for': 'markdown' }
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

" Ultisnips
Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories = ["~/.vim/UltiSnips"]

" Nerdtree
Plug 'preservim/nerdtree'
Plug 'PhilRunninger/nerdtree-visual-selection'
let g:NERDTreeGitStatusConcealBrackets = 1

" Undotree
Plug 'mbbill/undotree'
let g:undotree_WindowLayout = 2
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_TreeNodeShape = '█'
let g:undotree_TreeVertShape = '│'
let g:undotree_TreeSplitShape = '╱'
let g:undotree_TreeReturnShape = '╲'

" Calendar
Plug 'itchyny/calendar.vim'
let g:calendar_cache_directory = '~/google-drive/Wiki/calendar'
let g:calendar_views = ['year', 'month', 'week', 'day_5', 'day', 'event', 'agenda', 'clock']
let g:calendar_first_day = 'monday'
let g:calendar_week_number = 1
let g:calendar_cyclic_view = 1

" Vimwiki, taskwiki
Plug 'vimwiki/vimwiki'
" Plug 'tools-life/taskwiki'
au BufNewFile ~/google-drive/Wiki/diary/*.md :silent 0r !~/.local/bin/vw-diary '%'
" let g:taskwiki_taskrc_location = '~/.task/taskrc'
" let g:taskwiki_data_location = '~/.task'
let g:vimwiki_table_mappings = 0            " tab should work for snippets also
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_auto_diary_index = 1
let g:vimwiki_global_ext = 0
let g:vimwiki_markdown_link_ext = 1
let g:vimwiki_option_list_margin = 0
"let g:vimwiki_filetypes = ['markdown']
"let g:vimwiki_folding = "expr"
let home_wiki = {'name': 'home wiki',
            \ 'path': '~/google-drive/Wiki/',
            \ 'ext': '.md',
            \ 'syntax': 'markdown',
            \ 'auto_generate_links': 1,
            \ 'html_filename_parameterization': 1,
            \ 'path_html': '~/google-drive/Wiki/build',
            \ 'template_path': '~/google-drive/Wiki/skel/',
            \ 'template_default': 'default',
            \ 'template_ext': '.tpl'}
let thesis_wiki = {'name': 'thesis wiki',
            \ 'path': '~/google-drive/current/14.12-thesis/wiki/',
            \ 'ext': '.md',
            \ 'syntax': 'markdown',
            \ 'auto_generate_links': 1,
            \ 'html_filename_parameterization': 1,
            \ 'custom_wiki2html': 'vimwiki_markdown',
            \ 'path_html': '~/google-drive/current/14.12-thesis/docs',
            \ 'template_path': '~/google-drive/current/14.12-thesis/wiki/skel',
            \ 'template_default': 'default',
            \ 'template_ext': '.tpl'}
let private_wiki = {'name': 'private wiki',
            \ 'path': '~/Documents/Wiki/',
            \ 'ext': '.md',
            \ 'syntax': 'markdown',
            \ 'auto_generate_links': 1,
            \ 'html_filename_parameterization': 1,
            \ 'path_html': '~/Documents/Wiki/build',
            \ 'template_path': '~/Documents/Wiki/skel/',
            \ 'template_default': 'default',
            \ 'template_ext': '.tpl'}
let zettel = {'name': 'zettelkasten',
            \ 'ext': '.md',
            \ 'syntax': 'markdown',
            \ 'link_space_char': '-',
            \ 'path': '~/google-drive/Zettelkasten'}
let g:vimwiki_list = [zettel, home_wiki, thesis_wiki, private_wiki]

" fzf
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
let $FZF_BIBTEX_CACHEDIR = '/home/emilia/Downloads/fzf-bibtex'
let $FZF_BIBTEX_SOURCES = '/home/emilia/google-drive/current/bibliography.bib'
let g:fzf_buffers_jump = 1
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" vim-zettel
Plug 'michal-h21/vim-zettel'
Plug 'https://github.com/alok/notational-fzf-vim'
let g:nv_search_paths = ['~/google-drive/Zettelkasten']
let g:zettel_format = "%y%m%d%H%M"
let g:zettel_default_title = "unnamed"

function! s:insert_id()
if exists("g:zettel_current_id")
  return g:zettel_current_id
else
  return "unnamed"
endif
endfunction
 
let g:zettel_options = [{"template" :  "~/google-drive/Zettelkasten/templates/note.tpl",
            \'front_matter': [['tags', ':tag:'],['id', function('s:insert_id')]]}]

nnoremap <leader>zn :ZettelNew<space>
nnoremap <leader>zo :ZettelOpen<CR>
nnoremap <leader>zs :NV<CR>
nmap gB :NV \(<C-R>=expand("%:t:r")<CR><CR> 

call plug#end()

" }}}

" base16
" if exists('$BASE16_THEME')
"     \ && (!exists('g:colors_name') 
"     \ || g:colors_name != 'base16-$BASE16_THEME')
"   let base16colorspace=256
"   colorscheme base16-$BASE16_THEME
" endif

colorscheme vacme


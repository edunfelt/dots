""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"         __                                                             "
" .--.--.|__|.--------.----.----.                                        "
" |  |  ||  ||        |   _|  __|                                        "
"  \___/ |__||__|__|__|__| |____|                                        "
"                                                                        "
" Emilia's vimrc <3                                                      "
" Edited: 2021-06-27                                                     "
" Author: Emilia Dunfelt, edun@dunfelt.se                                "
"                                                                        "
" Structure:                                                             "
" 1. General settings                                                    "
" 2. Mappings                                                            "
" 3. Vundle plugins                                                      "
" 3.1 Appearance                                                         "
" 3.2 Coding                                                             "
" 3.2.1 Linting                                                          "
" 3.2.2 Python                                                           "
" 3.2.3 LaTeX                                                            "
" 3.3 Ultisnips                                                          "
" 3.4 Nerdtree                                                           "
" 3.5 Vimwiki                                                            "
" 3.6 Airline                                                            "
" 3.7 Misc.                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 1. General settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible                                    " be iMproved
set termguicolors
set runtimepath+=~/.config/vim,~/.config/vim/after
set viminfo+=n~/.config/vim/viminfo
set viewdir=~/.config/vim/view

set encoding=UTF-8                              	" encoding, please
syntax enable					                    " syntax highlighting
set autoindent			                            " autoindent new lines
filetype plugin indent on			                " filetype detection

set expandtab					                    " tabs are spaces
set tabstop=4				                        " number of visual spaces per TAB
set softtabstop=4		                            " number of spaces per tab when editing
set wrap linebreak nolist               	        " wrap things nicely

set foldmethod=indent                           	" fold on indentation
set foldlevel=99                                	" all folds open

set number				                            " show line numbers
set showcmd		    	                            " show command in bottom bar
set wildmenu				                        " visual autocomplete for command menu
set showmatch					                    " highlight matching parentheses

set incsearch					                    " search as characters are entered
set hlsearch				                        " highlight matches

setlocal spell                          	        " spellcheck on
set spelllang=en_us                             	" I write mostly in English anyway

" some things needed for well behaved coc
set hidden
set cmdheight=2
set updatetime=300
set shortmess+=c


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 2. Mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" turn off search highlight with escape
nnoremap <leader><Esc> :nohlsearch<CR>

" replace misspelled word on C-l
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

" remap escape
inoremap jk <esc>

" space is leader
let mapleader=" "

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" toggle fold on space
nnoremap <space> za

" save and restore folds
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

" line wrapping
command! -nargs=* Wrap set wrap linebreak nolist

" change to current file dir
nnoremap <leader>cd :cd %:p:h<CR>

" toggle nerdtree
map <C-n> :NERDTreeToggle<CR>


" Run code
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" run python in new split buffer
autocmd Filetype python nnoremap <buffer> <F6> :w<CR>:ter python "%"<CR>

" run python normally
imap <F5> <Esc>:w<CR>:!clear;python %<CR>
nmap <F5> <Esc>:w<CR>:!clear;python %<CR>

" fix linting problems on save and F10
nmap <F10> :ALEFix<CR>


" Debug code
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
packadd termdebug
let g:termdebug_wide=1
noremap <silent> <leader>dr :Termdebug<cr>
noremap <silent> <leader>rr :Run<cr>
noremap <silent> <leader>b :Break<cr>
noremap <silent> <leader>c :Clear<cr>
noremap <silent> <leader>s :Step<cr>
noremap <silent> <leader>o :Over<cr>
noremap <silent> <leader>e :Evaluate<cr>
noremap <silent> <leader>x :Continue<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 3. Vundle
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" stuff that needs to load before plugins
let g:ale_disable_lsp = 1

set rtp+=$HOME/.config/vim/bundle/Vundle.vim/
call vundle#begin('$HOME/.config/vim/bundle/')
Plugin 'VundleVim/Vundle.vim'

" 3.1 Appearance
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" base16
Plugin 'fnune/base16-vim'

" everforest
Plugin 'sainnhe/everforest'
let g:everforest_background = "medium"

" solarized
Plugin 'nisavid/vim-colors-solarized'

" syntax highlighting
Plugin 'sheerun/vim-polyglot'

" recognize colors
Plugin 'gko/vim-coloresque'

" distraction-free writing
Plugin 'junegunn/goyo.vim'

" 3.2 Coding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 3.2.1 Linting
"""""""""""""""
" linting
Plugin 'dense-analysis/ale'

let g:ale_linters_explicit = 1
let g:ale_fix_on_save = 1
let g:ale_lint_on_text_changed = "never"
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_set_highlights = 0
let g:ale_sign_warning = "~"
let g:ale_sign_error = "*"
let g:ale_linters = {
        \'python': ['flake8', 'pylint'],
        \'javascript' : ['eslint']
        \}
let g:ale_fixers = {
        \'python': ['yapf'],
        \}
"
" 3.2.2 Python
""""""""""""""
" indentation
Plugin 'Vimjas/vim-python-pep8-indent'
let g:python_pep8_indent_hang_closing = 1

" 3.2.3 C
Plugin 'WolfgangMehner/c-support'

" 3.2.4 LaTeX
"""""""""""""
Plugin 'lervag/vimtex'
Plugin 'honza/vim-snippets'

let g:tex_flavor = "latex"
let g:vimtex_view_method = "zathura"
let g:vimtex_quickfix_mode = 0
set conceallevel=1
let g:tex_conceal="abdmg"

" 3.3 Ultisnips
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'SirVer/ultisnips'

let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories = ["~/.config/vim/UltiSnips"]

" 3.4 Code completion
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'neoclide/coc.nvim'

" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" 3.5 Nerdtree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'preservim/nerdtree'
Plugin 'ryanoasis/vim-devicons'
Plugin 'PhilRunninger/nerdtree-visual-selection'
Plugin 'Xuyuanp/nerdtree-git-plugin'

let g:NERDTreeGitStatusUseNerdFonts = 1
let g:NERDTreeGitStatusConcealBrackets = 1
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeBookmarksFile = $HOME."/.config/vim/NERDTreeBookmarks"

" 3.6 Vimwiki
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'vimwiki/vimwiki'
Plugin 'itchyny/calendar.vim'

let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_use_calendar = 1
let g:vimwiki_auto_diary_index = 1
let g:vimwiki_folding = "expr"
let g:vimwiki_list = [{
      \'path': '/media/nas/home/00-09_Meta/02_Vimwiki',
      \'ext': '.wiki',
      \'path_html': '/media/nas/home/00-09_Meta/02_Vimwiki/docs/',
      \'template_path': '/media/nas/home/00-09_Meta/02_Vimwiki/templates/',
      \'template_default': 'default',
      \'template_ext': '.html'
      \}]

" 3.7 Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'dawikur/base16-vim-airline-themes'

" appearance
let g:airline_stl_path_style = "short"
let g:airline_powerline_fonts = 1
let g:airline_detect_spell = 0

" extensions
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tab_count = 0
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#tabs_label = ""
let g:airline#extensions#tabline#formatter = "unique_tail"
let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>0 <Plug>AirlineSelectTab0
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>+ <Plug>AirlineSelectNextTab

let g:airline#extensoins#ale#enabled = 1
let airline#extensions#ale#error_symbol = '*:'
let airline#extensions#ale#warning_symbol = '~:'
let airline#extensions#ale#show_line_numbers = 1

let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ""

let g:airline#extensions#default#layout = [
      \ [ 'a', 'b', 'c' ],
      \ [ 'x', 'z' ]
      \ ]

let g:airline#extensions#nerdtree_statusline = 1

let g:airline#extensions#vimtex#enabled = 1

" 3.8 Misc.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" git integration
Plugin 'tpope/vim-fugitive'

" easy commenting
Plugin 'preservim/nerdcommenter'

" easy motion
Plugin 'easymotion/vim-easymotion'

call vundle#end()

" show colors in alacritty
"let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"let &t_8b = "\<Esc>[48:2;%lu;%lu;%lum"
"let t_Co=256

" base16 shell integration (must be after vundle section)
"if filereadable(expand("~/.config/vim/vimrc_background"))
  "let base16colorspace=256
  "source ~/.config/vim/vimrc_background
"endif

if has("gui_running")
  set background=light
  set guifont=Iosevka\ Regular\ 11
  colorscheme solarized
  let g:airline_theme = "solarized"
else
  set background=light
  colorscheme solarized
  let g:airline_theme = "solarized"
endif

